https://github.com/donnemartin/system-design-primer#system-design-topics-start-here

Scalability
    - Vertical scaling
    - Horizontal scaling
    - Caching
    - Load balancing
    - Database replication
    - Database partitioning
Topics covered:
    Clones
    Databases
    - MySQL, SQL -
        - master-slave replication (read from slaves, write to master)
        - Needs to start introduce sharding
        - Joins are expensive
    - Change from SQL to NoSQL
        - Performance increases since no joins required 
        - Soon getting data will be slow and you need to introduce Caching
    Caches
        - in memory cache - Memcached or Redis
        - Cache - simple key-value store 
        - resides as buffering layer between application and data storage
        - Cache is lighting-fast so you should check before going to Database
        Patterns of Caching Data
            - Cached Database Queries
                - Saving queries result into cache
                - Problem: When a piece of data changes (table cell) you will need to delete all cache queries that include that table cell.
            - Cached Objects
                - Saving instance as objects makes it easy to get back and delete from cache
    Asynchronism
        - The frontend of your website sends a job onto a job queue and immediately signals back to the user: your job is in work, please continue to the browse the page. 
        - The job queue is constantly checked by a bunch of workers for new jobs. If there is a new job then the worker does the job and after some minutes sends a signal that the job was done. 
        - RabbitMQ
            -one of many systems which help to implement async processing

Performance vs Scalability

A service is scalable if it results in increased performance in a manner proportional to resources added. Generally, increasing performance means serving more units of work, but it can also be to handle larger units of work, such as when datasets grow.1

Another way to look at performance vs scalability:

If you have a performance problem, your system is slow for a single user.
If you have a scalability problem, your system is fast for a single user but slow under heavy load.